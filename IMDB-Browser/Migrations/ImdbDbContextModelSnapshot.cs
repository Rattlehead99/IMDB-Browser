// <auto-generated />
using System;
using IMDB_Browser.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMDB_Browser.Migrations
{
    [DbContext(typeof(ImdbDbContext))]
    partial class ImdbDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<string>("ActorsNconst")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MoviesTconst")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActorsNconst", "MoviesTconst");

                    b.HasIndex("MoviesTconst");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("IMDB_Browser.Models.Actor", b =>
                {
                    b.Property<string>("Nconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("int");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("int");

                    b.Property<string>("KnownForTitles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryProfession")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nconst");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("IMDB_Browser.Models.Movie", b =>
                {
                    b.Property<string>("Tconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IsAdult")
                        .HasColumnType("int");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RunTimeMinutes")
                        .HasColumnType("int");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("TitleType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tconst");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("IMDB_Browser.Models.Rating", b =>
                {
                    b.Property<string>("Tconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("MovieId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumVotes")
                        .HasColumnType("int");

                    b.HasKey("Tconst");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("IMDB_Browser.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsNconst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMDB_Browser.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesTconst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMDB_Browser.Models.Rating", b =>
                {
                    b.HasOne("IMDB_Browser.Models.Movie", "Movie")
                        .WithOne("Rating")
                        .HasForeignKey("IMDB_Browser.Models.Rating", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("IMDB_Browser.Models.Movie", b =>
                {
                    b.Navigation("Rating")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
